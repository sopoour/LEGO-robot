#!/usr/bin/python3
import os
# initialize asebamedulla in background and wait 0.3s to let
# asebamedulla startup
os.system("(asebamedulla ser:name=Thymio-II &) && sleep 0.3")
import matplotlib.pyplot as plt
import numpy as np
import cv2
from picamera import PiCamera
from time import sleep
import dbus
import dbus.mainloop.glib
#from adafruit_rplidar import RPLidar
from math import cos, sin, pi, floor
import threading
import random


print("Starting robot")

#-----------------------init script--------------------------
#camera = PiCamera()

def dbusError(self, e):
    # dbus errors can be handled here.
    # Currently only the error is logged. Maybe interrupt the mainloop here
    print('dbus error: %s' % str(e))


# init the dbus main loop
dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    
# get stub of the aseba network
bus = dbus.SessionBus()
asebaNetworkObject = bus.get_object('ch.epfl.mobots.Aseba', '/')
    
# prepare interface
asebaNetwork = dbus.Interface(
    asebaNetworkObject,
    dbus_interface='ch.epfl.mobots.AsebaNetwork'
)
    
# load the file which is run on the thymio
asebaNetwork.LoadScripts(
    'thympi.aesl',
    reply_handler=dbusError,
    error_handler=dbusError
)

#signal scanning thread to exit
exit_now = False

# Setup the RPLidar
#PORT_NAME = '/dev/ttyUSB0'
#lidar = RPLidar(None, PORT_NAME)
#This is where we store the lidar readings
#scan_data = [0]*360
#--------------------- init script end -------------------------

def testCamera():
    print("Camera test")
    camera.start_preview()
    sleep(5)
    #we capture to openCV compatible format
    #you might want to increase resolution
    camera.resolution = (320, 240)
    camera.framerate = 24
    sleep(2)
    image = np.empty((240, 320, 3), dtype=np.uint8)
    camera.capture(image, 'bgr')
    cv2.imwrite('out.png', image) 
    camera.stop_preview()
    print("saved image to out.png")


def stop(left_wheel, right_wheel):
    left_wheel = 0
    right_wheel = 0
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )

def turnLeft(left_wheel, right_wheel, velocity):
    left_wheel = -velocity
    right_wheel = velocity
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )

def turnRight(left_wheel, right_wheel, velocity):
    left_wheel = velocity
    right_wheel = -velocity
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )
def goStraightSlow(left_wheel, right_wheel, velocity):
    left_wheel = velocity
    right_wheel = velocity
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )

def goStraightFast(left_wheel, right_wheel, velocity):
    left_wheel = velocity * 2
    right_wheel = velocity * 2
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )


def turnAround(left_wheel, right_wheel, velocity):
    left_wheel = velocity*pi
    right_wheel = 0
    print("turned-around")
    asebaNetwork.SendEventName(
        'motor.target',
        [left_wheel, right_wheel]
    )


def scanning(left_wheel, right_wheel, velocity):
    print("scanning")

#def thymioController():
    
    #turnAround(left_wheel, right_wheel, velocity)
    #turnAround(left_wheel, right_wheel, velocity)
    #stop(left_wheel, right_wheel)
    #goStraightFast(left_wheel, right_wheel, velocity)

    #print("motor should be running now")


#NOTE: if you get adafruit_rplidar.RPLidarException: Incorrect descriptor starting bytes
# try disconnecting the usb cable and reconnect again. That should fix the issue
def lidarScan():
    print("Starting background lidar scanning")
    for scan in lidar.iter_scans():
        if(exit_now):
            return
        for (_, angle, distance) in scan:
            scan_data[min([359, floor(angle)])] = distance

#scanner_thread = threading.Thread(target=lidarScan)
#scanner_thread.daemon = True
#scanner_thread.start()

#def testLidar():
 #   print(scan_data)

#------------------ Main loop here -------------------------

def mainLoop():
    #do stuff
    #print(scan_data)  
    print("hi")
    

#------------------- Main loop end ------------------------

if __name__ == '__main__':
    #testCamera()
    #testLidar()
    #thymioController()
    left_wheel = 0
    right_wheel = 0
    velocity = 3000*pi/4
    counter = 0
    #State 0 = Turn around, 1 = Check Ball, 2 = Move to ball, 3 = Catch Ball, 4 = home
    state = 0
    homePosition = 1
    #Distance 0 = short, 1 = long
    distance = 0
    ball = True
    #Where to turn 1 = left 2 = straight, 3 = right
    direction = 1
    start = True

    try:
        while True:
            #Finding position
            if(state == 0):
                print("Find position")
                state = 1
            #Turn 180 degrees and go straight to center if it is the start of the game  
            elif(state == 1):
                while(counter < 2000):
                    turnAround(left_wheel, right_wheel, velocity)
                    counter += 1
                if(counter >= 2000):
                    stop(left_wheel, right_wheel)
                    print("stop!")
                    state = 2
                    counter = 0
                if(start == True):
                    print("go to center and push balls and then go home")   
                    #TODO: Figure for how long the counter should run
                    while(counter < 6000):
                        if(counter < 4000):
                            goStraightFast(left_wheel, right_wheel, velocity)
                            start = False
                        else:
                            print("go home")
                            #goHome()
                        counter += 1
                    if (counter >= 6000):
                        counter = 0    
                        print("stop")
                        stop(left_wheel, right_wheel)
            #Detect ball and drive towards it
            elif(state == 2):
                #TODO: Read variables from OpenCV
                angle = 0
                dist = 0
                direction = random.randint(1,3)
                if(distance == 0):
                    print("short")
                    angle = 250
                    dist = 250
                else:
                    print("long")
                    angle = 500
                    dist = 500
                while counter < angle + dist:
                    if(counter < angle):
                        if(direction == 1):
                            turnLeft(left_wheel, right_wheel, velocity)
                        elif(direction == 2):
                            goStraightSlow(left_wheel, right_wheel, velocity)
                        elif(direction == 3):
                            turnRight(left_wheel, right_wheel, velocity)
                    else:
                        goStraightSlow(left_wheel, right_wheel, velocity)
                    counter += 1
                if (counter >= angle+dist):
                    stop(left_wheel, right_wheel)
                    state = 2
                    counter = 0 
            #Move ball to the enemy field go forward until we hit a wall
            elif(state == 3):
                print("Move forward")
                #Move forward until wall
                #Turn around
                state = 4
            #Go to home position
            elif(state == 4)
                #Go back to state 1 - check for ball
                state = 1

            
            

                    
            
    except KeyboardInterrupt:
        print("Stopping robot")
        exit_now = True
        sleep(1)
        #lidar.stop()
        #lidar.disconnect()
        stop(left_wheel, right_wheel)
        os.system("pkill -n -f asebamedulla")
        
        print("asebamodulla killed")
