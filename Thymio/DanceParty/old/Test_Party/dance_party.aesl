<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="2000" name="threshold_max"/>
<constant value="3500" name="threshold_close"/>
<constant value="1200" name="threshold_min"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="22471" name="thymio-II">###STATE MACHINE###
#0 = Off
#1 = Benchwarmer
#2 = Find-dance-partner (randomly move out, follow wall)
#3 = Pairing
#4 = Match
#5 = Move-to-center
#6 = Dance
#7 = Return-to-bench
 
#####Variable declaration#####
var velocity = 0
#distance to the wall
#basis of (dist * pi)
var dist_pi = 0
#basis of (2 * pi)
var two_pi = 0

var gender
var random
var state
var comm_count

#timer
#timer.period[1] = 5
#timer.period[0] = 1
#QUESTION: Should we set one of the timers to 15sec (for dancing) and one to 30sec in case there hasn't been any pairing?
#CHECK: are the timers in seconds?


###BEHAVIORS###
sub random_gender
	call math.rand(gender)

sub random_nr
	call math.rand(random)	
	
sub stop 
	motor.left.target =  0
	motor.right.target = 0
	
sub velocity_calc
	#multiply 2 and pi=3
	call math.mul(two_pi, 2,3)
	#devide 10 by two_pi
	call math.div(velocity, 10, two_pi)
	#devide dist by pi=3
	call math.div(dist_pi, threshold_max, 3)
	call math.div(velocity, dist_pi, 4)

sub turn_right
	callsub velocity_calc
	motor.left.target =  velocity
	motor.right.target = -velocity
	
sub turn_right_soft
	motor.left.target =  200
	motor.right.target = 150
	
sub turn_left
	callsub velocity_calc
	motor.left.target =  -velocity
	motor.right.target =  velocity

sub turn_left_soft
	motor.left.target =  150
	motor.right.target = 200
	
sub go_straight
	motor.left.target = 300
	motor.right.target = 300
	
sub go_backwards
	motor.left.target = -300
	motor.right.target = -300
	
sub look_for_partner
callsub go_straight
	#robot should listen by sending out 0s
	#prox.comm.tx = 0
	#Wall-following
	if prox.horizontal[4] > threshold_min or prox.horizontal[3] > threshold_min then	
		callsub turn_left
	end

sub send_ack
	if prox.comm.rx != gender then
		callsub stop
		state = 3 #Pairing
		comm_count = comm_count +1
		if comm_count >= 5 then
			state = 4 #Match
			call leds.top(0,32,0)	
			comm_count = 0
			#pairing-message = 3
			prox.comm.tx = 3
		end
	end
	
sub recieve_ack
	if prox.comm.rx == 3 and state == 1 then
		state = 4 #Match
		call leds.top(0,32,0)	
	end

sub dance
	if prox.horizontal[1] > threshold_max and prox.horizontal[2] > threshold_max and prox.horizontal[3] > threshold_max then
		while timer.period[1] > 0 do
			callsub turn_left_soft
			callsub turn_right_soft
		end
	end

sub move_to_center_front
	#after match robot needs to turn off communication
	call prox.comm.enable(0)
	timer.period[1] = 5
	#move for 5sec
	while  timer.period[1] > 0 do
		callsub go_straight
	end
	state = 5

sub move_to_center_back
	#after match robot needs to turn off communication
	call prox.comm.enable(0)
	#move for 5sec
	while  timer.period[1] > 0 do
		callsub go_backwards
	end
	state = 5

sub back_to_position	
	callsub go_backwards
	if  prox.horizontal[5] > threshold_close and prox.horizontal[6] > threshold_close then
		callsub stop
	elseif  prox.horizontal[5] > threshold_max or prox.horizontal[6] > threshold_max then
		motor.left.target = -100
		motor.right.target = -100
	elseif prox.horizontal[5] > prox.horizontal[6] then
		#correct right wheel backwards
		callsub velocity_calc
		motor.left.target = velocity
		motor.right.target = -velocity
	elseif prox.horizontal[6] > prox.horizontal[5] then
		motor.left.target = -velocity
		motor.right.target = velocity
	end
	
####MAIN####

#State 0 to 1
#Benchwarmer
#only start when clicking on the center button
onevent button.center
	#call prox.comm.enable(1)
	callsub random_gender
	#timer.period[0] = abs(gender)
	if  gender &lt; 0 then
		gender = 1 #female
		#colour = red
		call leds.top(32,0,0)
		#prox.comm.tx = 1
	else
		gender = 2 #male
		#colour = blue
		call leds.top(0,0,32)
		#prox.comm.tx = 2
	end
	state = 1

onevent prox
	#State 1 to 2
	#Find Dance Partner - Wall Following
	#QUESTION: How do we make sure that only one is moving at a time?
	#callsub random_nr
	#if state = benchwarmer add randomness into when one of the robots chooses to find a partner
	if state == 1 then
		callsub look_for_partner
		state = 2
	#if state = move-to-center
	#elseif state == 5 then
	#	callsub dance
	#	state = 6
	#Return to be a benchwarmer
	#elseif  state == 7 then
	#	state = 1
	end

#look for partner in a timer range same for going back
#onevent timer0
	#if dancing find a position at the wall
#	if state == 6 then
#		callsub back_to_position
#		state = 7
#	end
	
#State 2 to 3 and 3 to 4 and 4 to 5
#Communicate &amp; Pair	&amp; Move to center
onevent prox.comm
	#if state = find-dance-partner or ready for pairing
	if  state == 2 or state==3 then
		#tx robot = benchwarmer who sends its gender
		callsub send_ack
		#if send-ack successful = match
		if  state == 4 then
			callsub move_to_center_back
		end
	#if state = benchwarmer
	elseif state == 1 then
		#be ready to receive
		callsub recieve_ack
		#if message received = match
		if  state == 4 then
			callsub move_to_center_front
		end
	end	

onevent button.backward
	callsub stop	

	</node>


</network>
