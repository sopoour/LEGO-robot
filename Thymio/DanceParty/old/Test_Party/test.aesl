<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="2000" name="threshold_max"/>
<constant value="1200" name="threshold_min"/>
<constant value="3500" name="threshold_close"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="22471" name="thymio-II">#####Variable declaration#####
var velocity = 0
#distance to the wall
#basis of (dist * pi)
var dist_pi = 0
#basis of (2 * pi)
var two_pi = 0

var gender
var random
var state
var comm_count
var counter = 0

###BEHAVIORS###
sub random_gender
	call math.rand(gender)

sub random_nr
	call math.rand(random)	
	
sub stop 
	motor.left.target =  0
	motor.right.target = 0
	
sub velocity_calc
	#multiply 2 and pi=3
	call math.mul(two_pi, 2,3)
	#devide 10 by two_pi
	call math.div(velocity, 10, two_pi)
	#devide dist by pi=3
	call math.div(dist_pi, threshold_max, 3)
	call math.div(velocity, dist_pi, 4)

sub turn_right
	callsub velocity_calc
	motor.left.target =  velocity
	motor.right.target = -velocity
	
sub turn_right_soft
	motor.left.target =  200
	motor.right.target = -200
	
sub turn_left
	callsub velocity_calc
	motor.left.target =  -velocity
	motor.right.target =  velocity

sub turn_left_soft
	motor.left.target =  -200
	motor.right.target = 200
	
sub go_straight
	motor.left.target = 300
	motor.right.target = 300
	
sub go_backwards
	motor.left.target = -300
	motor.right.target = -300
	
sub look_for_partner
	callsub go_straight
	#robot should listen by sending out 0s
	#prox.comm.tx = 0
	#Wall-following
	if  state == 1 then
		state = 2
		if prox.horizontal[4] > threshold_min or prox.horizontal[3] > threshold_min
		then	
			callsub turn_left
		end
	end


sub send_ack
	if prox.comm.rx != gender then
		callsub stop
		state = 3 #Pairing
		comm_count += 1
		if comm_count >= 5 then
			state = 4 #Match
			call leds.top(32,0,32)	
			comm_count = 0
			#pairing-message = 3
			prox.comm.tx = 3
		end
	end

sub receive_ack
	if prox.comm.rx == 3 and state == 1 then
		state = 4 #Match
		call leds.top(32,0,32)	
	end

sub dance
	if prox.horizontal[2] > threshold_close then
		counter += 1
		#dance for 15sec
		if  counter >=150 then
			state = 6		
		elseif counter %2 == 0 then
				callsub turn_left
		else 
			callsub turn_right
		end
	end

sub move_to_center_front
	#after match robot needs to turn off communication
	call prox.comm.enable(0)
	timer.period[1] = 5
	#move for 5sec
	while  timer.period[1] > 0 do
		callsub go_straight
	end
	state = 5

sub move_to_center_back
	#after match robot needs to turn off communication
	call prox.comm.enable(0)
	timer.period[1] = 5
	#move for 5sec
	while  timer.period[1] > 0 do
		callsub go_backwards
	end
	state = 5
	
sub back_to_position	
	callsub go_backwards
	#When too close stop
	if  prox.horizontal[5] > threshold_close and prox.horizontal[6] > threshold_close then
		callsub stop
	#go slower when closer to the wall
	elseif  prox.horizontal[5] > threshold_max or prox.horizontal[6] > threshold_max then
		motor.left.target = -100
		motor.right.target = -100
	elseif prox.horizontal[5] > prox.horizontal[6] or prox.horizontal[6] > threshold_max then
		#correct right wheel backwards
		callsub velocity_calc
		motor.left.target = 0
		motor.right.target = -velocity		
	elseif prox.horizontal[6] > prox.horizontal[5] or prox.horizontal[5] > threshold_max then
		#correct left wheel backwards
		callsub velocity_calc
		motor.left.target = -velocity
		motor.right.target = 0	
	end

onevent button.center
	call prox.comm.enable(1)
	callsub random_gender
	timer.period[0] = abs(gender)
	if  gender &lt; 0 then
		gender = 1 #female
		#colour = red
		call leds.top(32,0,0)
		prox.comm.tx = 1
	else
		gender = 2 #male
		#colour = blue
		call leds.top(0,0,32)
		prox.comm.tx = 2
	end
	state = 1


onevent prox
	if  state == 1 then
		callsub look_for_partner
	#if state = move-to-center
	#elseif state == 5 then
	#	callsub dance
	#Return to be a benchwarmer
	#elseif  state == 7 then
	#	state = 1
	end


#look for partner in a timer range 
#onevent timer0
	#if dancing find a position at the wall
#	if state == 1 then
#		callsub look_for_partner
#	end
	
#State 2 to 3 and 3 to 4 and 4 to 5
#Communicate &amp;amp; Pair	&amp;amp; Move to center
onevent prox.comm
	#if state = find-dance-partner or ready for pairing
	if  state == 2 or state==3 then
		#tx robot = benchwarmer who sends its gender
		callsub send_ack
		#if send-ack successful = match
		if  state == 4 then
			callsub move_to_center_back
		end
	#if state = benchwarmer
	elseif state == 1 then
		#be ready to receive
		callsub receive_ack
		#if message received = match
		if  state == 4 then
			callsub move_to_center_front
		end
	end	

onevent button.backward
	callsub stop</node>


</network>
